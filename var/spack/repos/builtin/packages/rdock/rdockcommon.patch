diff -u -r -N a/bin/sdrmsd b/bin/sdrmsd
--- a/bin/sdrmsd	2020-10-15 13:34:27.000000000 +0900
+++ b/bin/sdrmsd	2020-10-15 17:33:50.000000000 +0900
@@ -11,7 +11,7 @@
 # Date: 08-11-2013
 
 import math
-import pybel
+from openbabel import pybel
 import numpy as npy
 import optparse
 
@@ -103,24 +103,24 @@
     return mappingpose[0]
 
 def parseArguments():
-	optparse.OptionParser.format_epilog = lambda self, formatter: self.epilog
-	epilog = """Args:
-	reference.sdf		SDF file with the reference molecule.
-	input.sdf		SDF file with the molecules to be compared to reference.\n"""
-	parser = optparse.OptionParser("usage: %prog [options] reference.sdf input.sdf", epilog=epilog)
-	parser.add_option("-f", "--fit",dest="fit", action="store_true", default=False,
+        optparse.OptionParser.format_epilog = lambda self, formatter: self.epilog
+        epilog = """Args:
+        reference.sdf                SDF file with the reference molecule.
+        input.sdf                SDF file with the molecules to be compared to reference.\n"""
+        parser = optparse.OptionParser("usage: %prog [options] reference.sdf input.sdf", epilog=epilog)
+        parser.add_option("-f", "--fit",dest="fit", action="store_true", default=False,
                   help="Superpose molecules before RMSD calculation")
-	parser.add_option("--threshold","-t",dest="threshold", action="store", nargs=1, 
+        parser.add_option("--threshold","-t",dest="threshold", action="store", nargs=1, 
                   help="Discard poses with RMSD < THRESHOLD with respect previous poses which where not rejected based on same principle. A Population SDField will be added to output SD with the population number.", type=float)
-	parser.add_option("-o","--out", dest="outfilename", metavar="FILE", default=False,
+        parser.add_option("-o","--out", dest="outfilename", metavar="FILE", default=False,
                   help="If declared, write an output SDF file with the input molecules with a new sdfield <RMSD>. If molecule was fitted, the fitted molecule coordinates will be saved.")
-	(options, args) =  parser.parse_args()
-	
-	#Check we have two arguments
-	if len(args) < 2:
-		parser.error("Incorrect number of arguments. Use -h or --help options to print help.")
+        (options, args) =  parser.parse_args()
+        
+        #Check we have two arguments
+        if len(args) < 2:
+                parser.error("Incorrect number of arguments. Use -h or --help options to print help.")
 
-	return options, args
+        return options, args
 
 def updateCoords(obmol, newcoords):
     "Update OBMol coordinates. newcoords is a numpy array"
@@ -133,8 +133,8 @@
     for correct RMSD comparison. Only the lowest RMSD will be returned.
     
     Returns:
-      If fit=False: 	bestRMSD	(float)					RMSD of the best matching mapping.
-      If fit=True:	(bestRMSD, molecCoordinates)	(float, npy.array)	RMSD of best match and its molecule fitted coordinates.	
+      If fit=False:         bestRMSD        (float)                                        RMSD of the best matching mapping.
+      If fit=True:        (bestRMSD, molecCoordinates)        (float, npy.array)        RMSD of best match and its molecule fitted coordinates.        
     """
     mappings = pybel.ob.vvpairUIntUInt()
     bitvec = pybel.ob.OBBitVec()
@@ -148,18 +148,18 @@
     posecoords = npy.array([atom.coords for atom in molec])[mappose]
     resultrmsd = 999999999999
     for mapping in mappings:
-	automorph_coords = [None] * len(targetcoords)
-	for x, y in mapping:
-	    automorph_coords[lookup.index(x)] = targetcoords[lookup.index(y)]
-	mapping_rmsd = rmsd(posecoords, automorph_coords)
-	if mapping_rmsd < resultrmsd:
-	    resultrmsd = mapping_rmsd
-	    fitted_result = False
-	if fit: 
-	    fitted_pose, fitted_rmsd = superpose3D(npy.array(automorph_coords), npy.array(posecoords))
-	    if fitted_rmsd < resultrmsd:
-		resultrmsd = fitted_rmsd
-		fitted_result = fitted_pose
+        automorph_coords = [None] * len(targetcoords)
+        for x, y in mapping:
+            automorph_coords[lookup.index(x)] = targetcoords[lookup.index(y)]
+        mapping_rmsd = rmsd(posecoords, automorph_coords)
+        if mapping_rmsd < resultrmsd:
+            resultrmsd = mapping_rmsd
+            fitted_result = False
+        if fit: 
+            fitted_pose, fitted_rmsd = superpose3D(npy.array(automorph_coords), npy.array(posecoords))
+            if fitted_rmsd < resultrmsd:
+                resultrmsd = fitted_rmsd
+                fitted_result = fitted_pose
     
     if fit:
       return (resultrmsd, fitted_pose)
@@ -167,16 +167,16 @@
       return resultrmsd
 
 def saveMolecWithRMSD(outsdf, molec, rmsd, population=False):
-    newData = pybel.ob.OBPairData()	
+    newData = pybel.ob.OBPairData()        
     newData.SetAttribute("RMSD")
     newData.SetValue('%.3f'%rmsd)
     
     if population:
-	popData = pybel.ob.OBPairData()
-	popData.SetAttribute("Population")
-	popData.SetValue('%i'%population)
-	molec.OBMol.CloneData(popData)
-	
+        popData = pybel.ob.OBPairData()
+        popData.SetAttribute("Population")
+        popData.SetValue('%i'%population)
+        molec.OBMol.CloneData(popData)
+        
     molec.OBMol.CloneData(newData)           # Add new data
     outsdf.write(molec)
     
@@ -184,13 +184,13 @@
     import sys, os
    
     (opts, args) = parseArguments() 
-	
+        
     xtal = args[0]
     poses = args[1]
 
     if not os.path.exists(xtal) or not os.path.exists(poses):
-	sys.exit("Input files not found. Please check the path given is correct.")
-	
+        sys.exit("Input files not found. Please check the path given is correct.")
+        
     fit = opts.fit
     outfname = opts.outfilename
     threshold = opts.threshold
@@ -202,71 +202,71 @@
 
     #If outfname is defined, prepare an output SDF sink to write molecules
     if outfname:
-	outsdf = pybel.Outputfile('sdf', outfname, overwrite=True)
+        outsdf = pybel.Outputfile('sdf', outfname, overwrite=True)
 
     # Find the RMSD between the crystal pose and each docked pose
     dockedposes = pybel.readfile("sdf", poses)
-    if fit: print "POSE\tRMSD_FIT"
-    else: print "POSE\tRMSD_NOFIT"
+    if fit: print ("POSE\tRMSD_FIT")
+    else: print ("POSE\tRMSD_NOFIT")
     skipped = []
-    moleclist = {}	# Save all poses with their dockid
-    population = {}	# Poses to be written
+    moleclist = {}        # Save all poses with their dockid
+    population = {}        # Poses to be written
     outlist = {}
     for docki, dockedpose in enumerate(dockedposes):
         dockedpose.removeh()
-	natoms = len(dockedpose.atoms)
-	if natoms != crystalnumatoms: 
-		skipped.append(docki+1)
-		continue
-	if fit: 
-	    resultrmsd, fitted_result = getAutomorphRMSD(crystal, dockedpose, fit=True)
-	    updateCoords(dockedpose, fitted_result)
-	else:
-	    resultrmsd = getAutomorphRMSD(crystal, dockedpose, fit=False)
-	
-	if threshold:
-	    # Calculate RMSD between all previous poses
-	    # Discard if rmsd < FILTER threshold
-	    if moleclist:
-		match = None
-		bestmatchrmsd = 999999
-		for did,prevmol in moleclist.iteritems():
-		    tmprmsd = getAutomorphRMSD(prevmol, dockedpose)
-		    if tmprmsd < threshold:
-			if tmprmsd < bestmatchrmsd:
-			    bestmatchrmsd = tmprmsd
-			    match = did
-			
-		if match != None:
-		    # Do not write this one
-		    # sum one up to the matching previous molecule id
-		    print >> sys.stderr, "Pose %i matches pose %i with %.3f RMSD"%(docki+1, match+1, bestmatchrmsd)
-		    population[match] += 1
-		else:
-		    # There's no match. Print info for this one and write to outsdf if needed
-		    # Save this one!
-		    if outfname: outlist[docki] = (dockedpose, resultrmsd)
-		    print "%d\t%.2f"%((docki+1),resultrmsd)
-		    moleclist[docki] = dockedpose
-		    population[docki] = 1
-	    else:
-		# First molecule in list. Append for sure
-		moleclist[docki] = dockedpose
-		population[docki] = 1
-		if outfname: outlist[docki] = (dockedpose, resultrmsd)
-	else:
-	    # Just write best rmsd found and the molecule to outsdf if demanded
-	    if outfname: saveMolecWithRMSD(outsdf, dockedpose, resultrmsd)
-	    print "%d\t%.2f"%((docki+1),resultrmsd)
+        natoms = len(dockedpose.atoms)
+        if natoms != crystalnumatoms: 
+                skipped.append(docki+1)
+                continue
+        if fit: 
+            resultrmsd, fitted_result = getAutomorphRMSD(crystal, dockedpose, fit=True)
+            updateCoords(dockedpose, fitted_result)
+        else:
+            resultrmsd = getAutomorphRMSD(crystal, dockedpose, fit=False)
+        
+        if threshold:
+            # Calculate RMSD between all previous poses
+            # Discard if rmsd < FILTER threshold
+            if moleclist:
+                match = None
+                bestmatchrmsd = 999999
+                for did,prevmol in moleclist.iteritems():
+                    tmprmsd = getAutomorphRMSD(prevmol, dockedpose)
+                    if tmprmsd < threshold:
+                        if tmprmsd < bestmatchrmsd:
+                            bestmatchrmsd = tmprmsd
+                            match = did
+                        
+                if match != None:
+                    # Do not write this one
+                    # sum one up to the matching previous molecule id
+                    print >> sys.stderr, "Pose %i matches pose %i with %.3f RMSD"%(docki+1, match+1, bestmatchrmsd)
+                    population[match] += 1
+                else:
+                    # There's no match. Print info for this one and write to outsdf if needed
+                    # Save this one!
+                    if outfname: outlist[docki] = (dockedpose, resultrmsd)
+                    print ("%d\t%.2f"%((docki+1),resultrmsd))
+                    moleclist[docki] = dockedpose
+                    population[docki] = 1
+            else:
+                # First molecule in list. Append for sure
+                moleclist[docki] = dockedpose
+                population[docki] = 1
+                if outfname: outlist[docki] = (dockedpose, resultrmsd)
+        else:
+            # Just write best rmsd found and the molecule to outsdf if demanded
+            if outfname: saveMolecWithRMSD(outsdf, dockedpose, resultrmsd)
+            print ("%d\t%.2f"%((docki+1),resultrmsd))
 
     if outlist:
-	# Threshold applied and outlist need to be written
-	for docki in sorted(outlist.iterkeys()):
-	    molrmsd = outlist[docki]
-	    # Get number of matchs in thresholding operation
-	    pop = population.get(docki)
-	    if not pop: pop = 1
-	    # Save molecule
-	    saveMolecWithRMSD(outsdf, molrmsd[0], molrmsd[1], pop)
-	    
-    if skipped: print >> sys.stderr, "SKIPPED input molecules due to number of atom missmatch: %s"%skipped
+        # Threshold applied and outlist need to be written
+        for docki in sorted(outlist.iterkeys()):
+            molrmsd = outlist[docki]
+            # Get number of matchs in thresholding operation
+            pop = population.get(docki)
+            if not pop: pop = 1
+            # Save molecule
+            saveMolecWithRMSD(outsdf, molrmsd[0], molrmsd[1], pop)
+            
+    if skipped: print("SKIPPED input molecules due to number of atom missmatch: %s"%skipped, file=sys.stderr)
diff -u -r -N a/build/test/OccupancyTest.h b/build/test/OccupancyTest.h
--- a/build/test/OccupancyTest.h	2020-10-14 14:23:40.000000000 +0900
+++ b/build/test/OccupancyTest.h	2020-10-14 14:24:14.000000000 +0900
@@ -32,7 +32,7 @@
 CPPUNIT_TEST_SUITE_END();
 
 public:
-  static const RbtDouble TINY = 1E-4;
+  static constexpr RbtDouble TINY = 1E-4;
   //TextFixture methods
   void setUp();
   void tearDown();
diff -u -r -N a/build/test/RbtChromTest.h b/build/test/RbtChromTest.h
--- a/build/test/RbtChromTest.h	2020-10-14 14:23:40.000000000 +0900
+++ b/build/test/RbtChromTest.h	2020-10-14 14:24:41.000000000 +0900
@@ -68,7 +68,7 @@
 CPPUNIT_TEST_SUITE_END();
 
 public:
-  static const RbtDouble TINY = 1E-4;
+  static constexpr RbtDouble TINY = 1E-4;
   //TextFixture methods
   void setUp();
   void tearDown();
diff -u -r -N a/build/test/RBT_HOME/check_test.py b/build/test/RBT_HOME/check_test.py
--- a/build/test/RBT_HOME/check_test.py	2020-10-14 11:48:36.000000000 +0900
+++ b/build/test/RBT_HOME/check_test.py	2020-10-14 11:49:36.000000000 +0900
@@ -21,6 +21,6 @@
 	error = 1
 
 if error == 1:
-	print "The test failed, please check the compilation is OK and no errors were raised."
+	print ("The test failed, please check the compilation is OK and no errors were raised.")
 else:
-	print "The test succeeded! The results agree with the reference ones.\nHave fun using rDock!!"
+	print ("The test succeeded! The results agree with the reference ones.\nHave fun using rDock!!")
diff -u -r -N a/build/test/SearchTest.h b/build/test/SearchTest.h
--- a/build/test/SearchTest.h	2020-10-14 14:23:40.000000000 +0900
+++ b/build/test/SearchTest.h	2020-10-14 14:24:56.000000000 +0900
@@ -33,7 +33,7 @@
 CPPUNIT_TEST_SUITE_END();
 
 public:
-  static const RbtDouble TINY = 1E-4;
+  static constexpr RbtDouble TINY = 1E-4;
   //TextFixture methods
   void setUp();
   void tearDown();
diff -u -r -N a/import/simplex/src/NMSearch.cxx b/import/simplex/src/NMSearch.cxx
--- a/import/simplex/src/NMSearch.cxx	2020-10-14 11:46:57.000000000 +0900
+++ b/import/simplex/src/NMSearch.cxx	2020-10-14 11:46:25.000000000 +0900
@@ -388,7 +388,7 @@
 
 void NMSearch::ReadSimplexFile(istream& fp)
 {
-   if(fp == NULL) {
+   if(!fp) {
       cerr<<"No Input Stream in ReadSimplexFile()!\n";
       return; // There's no file handle!!
    }
diff -u -r -N a/import/tnt/include/tnt_sparse_matrix_csr.h b/import/tnt/include/tnt_sparse_matrix_csr.h
--- a/import/tnt/include/tnt_sparse_matrix_csr.h	2020-10-07 17:46:55.000000000 +0900
+++ b/import/tnt/include/tnt_sparse_matrix_csr.h	2020-10-07 17:47:46.000000000 +0900
@@ -49,8 +49,8 @@
 
 private:
 	Array1D<T>    val_;       // data values (nz_ elements)
-    Array1D<int>  rowptr_;    // row_ptr (dim_[0]+1 elements)
-    Array1D<int>  colind_;    // col_ind  (nz_ elements)
+    Array1D<T>  rowptr_;    // row_ptr (dim_[0]+1 elements)
+    Array1D<T>  colind_;    // col_ind  (nz_ elements)
 
     int dim1_;        // number of rows
     int dim2_;        // number of cols
diff -u -r -N a/include/RbtAromIdxSF.h b/include/RbtAromIdxSF.h
--- a/include/RbtAromIdxSF.h	2020-10-07 16:27:42.000000000 +0900
+++ b/include/RbtAromIdxSF.h	2020-10-07 16:28:26.000000000 +0900
@@ -68,7 +68,7 @@
   //Generic scoring function params
   struct f1prms {
     RbtDouble R0,DRMin,DRMax,slope;
-    f1prms::f1prms(RbtDouble R, RbtDouble DMin, RbtDouble DMax)
+    f1prms(RbtDouble R, RbtDouble DMin, RbtDouble DMax)
       : R0(R),DRMin(DMin),DRMax(DMax),slope(1.0/(DMax-DMin)) {};
   };
 
diff -u -r -N a/include/RbtContainers.h b/include/RbtContainers.h
--- a/include/RbtContainers.h	2020-10-06 17:10:49.000000000 +0900
+++ b/include/RbtContainers.h	2020-10-06 17:17:02.000000000 +0900
@@ -33,20 +33,6 @@
 using std::set;
 
 #include <algorithm>
-//DM 9 Dec 1998 - add copy_if template to std namespace (not included in STL)
-namespace std
-{
-  template <class InputIterator, class OutputIterator, class Predicate>
-    OutputIterator copy_if(InputIterator first, InputIterator last,
-			   OutputIterator result, Predicate pred) {
-    for ( ; first != last; ++first)
-      if (pred(*first)) {
-				*result = *first;
-				++result;
-      }
-    return result;
-  }
-}
 
 // Container Typedefs
 	
diff -u -r -N a/include/RbtPolarSF.h b/include/RbtPolarSF.h
--- a/include/RbtPolarSF.h	2020-10-07 16:47:53.000000000 +0900
+++ b/include/RbtPolarSF.h	2020-10-07 16:50:02.000000000 +0900
@@ -78,7 +78,7 @@
   //Generic scoring function params
   struct f1prms {
     RbtDouble R0,DRMin,DRMax,slope;
-    f1prms::f1prms(RbtDouble R, RbtDouble DMin, RbtDouble DMax)
+    f1prms(RbtDouble R, RbtDouble DMin, RbtDouble DMax)
       : R0(R),DRMin(DMin),DRMax(DMax),slope(1.0/(DMax-DMin)) {};
   };
 
diff -u -r -N a/src/exe/rbcavity.cxx b/src/exe/rbcavity.cxx
--- a/src/exe/rbcavity.cxx	2020-10-07 15:19:25.000000000 +0900
+++ b/src/exe/rbcavity.cxx	2020-10-07 15:21:18.000000000 +0900
@@ -50,7 +50,7 @@
 
 int main(int argc,const char* argv[])
 {
-	char 			c;					// for argument parsing
+	int 			c;					// for argument parsing
 	poptContext		optCon;				// ditto
 	char 			*prmFile=NULL;		// will be strReceptorPrmFile
 	char 			*listDist=NULL;		// will be 'dist' 
diff -u -r -N a/src/exe/rbdock.cxx b/src/exe/rbdock.cxx
--- a/src/exe/rbdock.cxx	2020-10-07 15:19:35.000000000 +0900
+++ b/src/exe/rbdock.cxx	2020-10-07 15:21:39.000000000 +0900
@@ -100,7 +100,7 @@
 	RbtInt		iTrace(0);//Trace level, for debugging
 
 	// variables for popt command-line parsing
-	char 			c;						// for argument parsing
+	int 			c;						// for argument parsing
 	poptContext		optCon;					// ditto
 
 	char 			*inputFile=NULL;		// will be 'strLigandMdlFile'
diff -u -r -N a/src/lib/RbtBaseMolecularFileSource.cxx b/src/lib/RbtBaseMolecularFileSource.cxx
--- a/src/lib/RbtBaseMolecularFileSource.cxx	2020-10-14 11:40:46.000000000 +0900
+++ b/src/lib/RbtBaseMolecularFileSource.cxx	2020-10-15 11:32:05.000000000 +0900
@@ -260,7 +260,8 @@
   const RbtBondMap& bondMap = spAtom->GetBondMap();
 
   //First remove all bonds from the atom
-  for (RbtBondMapConstIter mapIter = bondMap.begin(); mapIter != bondMap.end(); mapIter++) {
+  RbtBondMapConstIter mapIter = bondMap.begin();
+  for (int i = 0; i < spAtom->GetNumBonds(); i++, mapIter++) {
     RbtBondListIter bIter = Rbt::FindBond(m_bondList,Rbt::isBond_eq((*mapIter).first));
     if (bIter != m_bondList.end()) {
 #ifdef _DEBUG
@@ -410,7 +411,7 @@
 #endif //_DEBUG
       return;
     }
-    std::remove(atList.begin(), atList.end(),_MANDATORY);
+    atList.erase(std::remove(atList.begin(), atList.end(),_MANDATORY), atList.end());
   }
   if (std::find(atList.begin(), atList.end(),_FORBIDDEN) != atList.end()) {
     RbtString forbidden = spParamSource->GetParameterValueAsString(_FORBIDDEN);
@@ -424,7 +425,7 @@
 #endif //_DEBUG
       return;
     }
-    std::remove(atList.begin(), atList.end(),_FORBIDDEN);
+    atList.erase(std::remove(atList.begin(), atList.end(),_FORBIDDEN), atList.end());
   }
   
   for (RbtStringListConstIter aIter = atList.begin(); aIter != atList.end(); aIter++) {
